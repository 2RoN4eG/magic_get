#  Copyright (C) 2016-2017, Antony Polukhin.
#
# Use, modification and distribution is subject to the Boost Software License,
# Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)
#

test-suite pfr
  :
    [ run common/ops.cpp                : : : <define>BOOST_PFR_TEST_FLAT       : flat_ops ]
    [ run common/ops.cpp                : : : <define>BOOST_PFR_TEST_PRECISE    : precise_ops ]
    [ run common/global_ops.cpp         : : : <define>BOOST_PFR_TEST_FLAT       : flat_global_ops ]
    [ run common/global_ops.cpp         : : : <define>BOOST_PFR_TEST_PRECISE    : precise_global_ops ]
    [ run common/functions_for.cpp      : : : <define>BOOST_PFR_TEST_FLAT       : flat_function_for ]
    [ run common/functions_for.cpp      : : : <define>BOOST_PFR_TEST_PRECISE    : precise_function_for ]
    [ run common/read_write.cpp         : : : <define>BOOST_PFR_TEST_FLAT       : flat_read_write ]
    [ run common/read_write.cpp         : : : <define>BOOST_PFR_TEST_PRECISE    : precise_read_write ]
    [ run common/std_interactions.cpp   : : : <define>BOOST_PFR_TEST_FLAT       : flat_std_interactions ]
    [ run common/std_interactions.cpp   : : : <define>BOOST_PFR_TEST_PRECISE    : precise_std_interactions ]
    [ compile-fail common/private_fields.cpp : <define>BOOST_PFR_TEST_FLAT      : flat_private_fields ]
    [ compile-fail common/private_fields.cpp : <define>BOOST_PFR_TEST_PRECISE   : precise_private_fields ]
    [ compile-fail common/protected_fields.cpp : <define>BOOST_PFR_TEST_FLAT    : flat_protected_fields ]
    [ compile-fail common/protected_fields.cpp : <define>BOOST_PFR_TEST_PRECISE : precise_protected_fields ]
    [ compile-fail common/virtual_functions.cpp : <define>BOOST_PFR_TEST_FLAT      : flat_virtual_functions ]
    [ compile-fail common/virtual_functions.cpp : <define>BOOST_PFR_TEST_PRECISE   : precise_virtual_functions ]
    [ compile-fail common/non_std_layout.cpp : <define>BOOST_PFR_TEST_FLAT      : flat_non_standard_layout ]
    [ run common/non_std_layout.cpp     : : : <define>BOOST_PFR_TEST_PRECISE    : precise_non_standard_layout ]

    [ run common/test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=char : test_tuple_sizes_on_chars ]
    [ run common/test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=int : test_tuple_sizes_on_ints ]
    [ run common/test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=short : test_tuple_sizes_on_shorts ]
    [ run common/test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=void* : test_tuple_sizes_on_voidptrs ]
    [ run common/test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=std::size_t : test_tuple_sizes_on_size_ts ]
    #[ run common/test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=char <define>BOOST_PFR_RUN_HUGE_TESTS : test_tuple_sizes_on_chars_huge ]

    [ run flat/core.cpp ]
    [ run flat/flat_tuple_size.cpp ]
    [ run flat/flat_motivating_example.cpp ]
    [ run flat/flat_for_each_field.cpp ]
    [ compile-fail flat/flat_tuple_size_on_non_aggregate.cpp ]
    [ compile-fail flat/flat_tuple_size_on_bitfields.cpp ]

    [ run precise/tuple_size.cpp : : : : precise_tuple_size ]
    [ run precise/bitfields.cpp : : : : precise_tuple_size_on_bitfields ]
    [ run precise/for_each_field.cpp : : : : precise_for_each_field ]
    [ run precise/motivating_example.cpp : : : : precise_motivating_example ]
    [ run precise/motivating_example2.cpp : : : : precise_motivating_example2 ]
    [ compile-fail precise/non_aggregate.cpp : : precise_non_aggregate ]

    [ run ../example/examples.cpp ]
    [ run ../example/quick_examples.cpp ]
  ;


