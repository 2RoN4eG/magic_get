[library Boost.Precise and Flat Reflection
    [quickbook 1.6]
    [version 1.0]
    [copyright 2016 Antony Polukhin]
    [category Language Features Emulation]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[section Motivation]

In C++ we have:

* tuples - types that provide access to members by index. Those are useful for generic programming.
* PODs - types with named fields that do not provide access to members by index. Those are just easy to use.

This library provides tuple like methods for POD types, making PODs usable in contexts were only tuples were useful.

[note All you have to do is to add `#include <boost/pfr.hpp>`.

No macro or other type/member registrations required.]

Boost.Precise and Flat Reflection (Boost.PFR) adds following out-of-the-box functionality to PODs:

* comparison operators
* heterogeneous comparators
* hash
* stream operators
* access to members by index
* member reflections
* methods for cooperation with `std::tuple`

[warning This is not an official Boost library! It wasn't reviewed and can't be downloaded from www.boost.org. This library is available to the community to know real interest and get comments for refinement. The intention is to submit library to formal review, if community think that it is interesting!]

[caution This is a C++14 library! Pre C++14 compilers (C++11, C++03...) are not supported]

[endsect]

[section Quick Start]

[import ../example/examples.cpp]

[section Accessing POD member by index] [pfr_example_get] [endsect]
[section Flattening] [pfr_example_flattening] [pfr_example_flattening_2] [endsect]
[/ [section Counting fields] [pfr_example_tuple_size] [endsect] ]

[section Flat or Precise functions to chose]
All the functions that have `flat_` prefix and are declared in `boost/pfr/flat/*` headers the [*flat] functions, other function are [*precise] and are defclared in `boost/pfr/precise/*`. In previous example you've seen how the the flattening works.

Flat functions are more limited in their reflection capabilities, but guarantee to not affect debug and release builds in C++14 mode (no additional code would be produced).

Precise functions have almost unlimited reflection capabilities, but may produce additional code in C++14 mode in debug builds and even in release builds (on old compilers or compilers with bad optimizers).

Here's how to chose your functions:

* If you use C++17 - use [*precise] functions
* If you work only with flat POD types in C++14 - use [*flat] functions
* If you work only with POD types in C++14 and wish them flattened - use [*flat] functions
* If you have modern compiler in C++14 mode and work with non-POD literal types with some hierarchy - you are forced to use [*precise] functions

[endsect]

[section Three ways of getting operators ]

There are three ways to start using Boost.PFR hashing, comparison and streaming operators for type `T` in your code. Each method has it's own drawbacks and suits own cases.

[table:flat_ops_comp Different approaches for operators
    [[ Approach ]                                       [ Defines operators in global namespace ]
                                                                                [ Defined operators could be found by ADL ]
                                                                                            [ Works for local types ]
                                                                                                        [ Usable localy, without affecting code from other scopes ]
                                                                                                                            [ Ignores implicit conversion operators ]  
                                                                                                                                                            [ Respects user defined operators ] ]
    [[ [headerref boost/pfr/flat/ops.hpp] or [headerref boost/pfr/precise/ops.hpp] ]              [ no ]                  [ no ]      [ yes ]     [ yes ]                                             [ no ]          [ yes ]                     ]
    [[ [headerref boost/pfr/flat/functions_for.hpp] or [headerref boost/pfr/precise/functions_for.hpp]  ] [ yes if T is in it ]   [ yes ]     [ no ]      [ no, but could be limited to translation unit ]    [ yes for T ]   [ no (compile time error) ] ]
    [[ [headerref boost/pfr/flat/global_ops.hpp] or [headerref boost/pfr/precise/global_ops.hpp] ]       [ yes ]                 [ yes ]     [ yes ]     [ no, but could be limited to translation unit ]    [ yes all ]     [ yes ]                     ]
]

More detailed description:

[*1) [headerref boost/pfr/precise/ops.hpp] and [headerref boost/pfr/flat/ops.hpp] approach]

This method is good if you're writing generic algorithms and need to use operators from Boost.PFR only if there's no operators defined for the type:

```
#include <boost/pfr/precise/ops.hpp>

template <class T>
struct uniform_comparator_less {
    bool operator()(const T& lhs, const T& rhs) const noexcept {
        using namespace boost::pfr::ops;    // Enables Boost.PFR operators usage in this scope.
        return lhs < rhs;           // If T has operator< or conversion operator then will use it, otherwise will use boost::pfr::flat_less<T>.
    }
};
```
This method's effects are local to the function. It works even for local types, like structures defined in functions.
However *Argument Dependant Lookup* does not work with it:

```
#include <boost/pfr/flat/ops.hpp>
template <class T>
struct uniform_comparator_less {
    bool operator()(const T& lhs, const T& rhs) const noexcept {
        using namespace flat_ops;
        return std::less{}(lhs, rhs);   // Compile time error if T has neither operator< nor conversion operator to comparable type.
    }
};
```

[*2) [headerref boost/pfr/flat/functions_for.hpp] approach]

This method is good if you're writing POD structure and wish to define operators for that structure.
```
#include <boost/pfr/flat/functions_for.hpp>

struct pair_like {
    int first;
    short second;
};

BOOST_PFR_FLAT_FUNCTIONS_FOR(pair_like)   // Defines operators

// ...

assert(pair_like{1, 2} < pair_like{1, 3});
```
Argument Dependant Lookup works well, `std::less` will find the operators for `struct pair_like`. [macroref BOOST_PFR_FLAT_FUNCTIONS_FOR BOOST_PFR_FLAT_FUNCTIONS_FOR(T)]
can not be used for local types, it must be called only once in namespace of `T`. It does not respect conversion operators of `T`, so for example the following code
will output different values:
```
#include <boost/pfr/flat/functions_for.hpp>

struct empty {
    operator std::string() { return "empty{}"; }
};
// Uncomment to get different output:
// BOOST_PFR_FLAT_FUNCTIONS_FOR(empty)

// ...
std::cout << empty{}; // Outputs `empty{}` if BOOST_PFR_FLAT_FUNCTIONS_FOR(empty) is commented out, '{}' otherwise.
```

[*3) [headerref boost/pfr/flat/global_ops.hpp] approach]

This approach is for those, who wish to have comparisons/streaming/hashing for all their types.

```
#include <boost/pfr/flat/global_ops.hpp>

struct pair_like {
    int first;
    short second;
};

// ...

assert(pair_like{1, 2} < pair_like{1, 3});
```
Argument Dependant Lookup works well, `std::less` will find the operators for `struct pair_like`. Operators for local types will be also defined.
*All conversion operators of all POD types won't be used during comparisons/streaming/hashing.*

[endsect]




[endsect]


[section Requirements and Limitations]

[note Boost.PFR does not depend on any Boost library. You may use it's headers even without Boost. ]

* Boost.PFR *requires C++14 compatible compiler* (GCC-5.0+, Clang, ...)
* Static variables are ignored
* T must be aggregate initializable

[*Flat] functions limitations:

* T must be POD and must not contain references nor bitfields
* T must not contain pointers to user defined types
* Enums will be returned as their underlying type
* All the methods that provide access to fields have a `reinterpret_cast` to an unrelated type. All the possible efforts and compiler specific tricks were used to avoid issues. But strictly speaking *this is an Undefined Behavior.

C++14 [*precise] functions limitations (C++17 fixes those):

* T must be constexpr aggregate initializable and all it's fields must be constexpr default constructible
* [funcref boost::pfr::get], [funcref boost::pfr::structure_to_tuple], [funcref boost::pfr::structure_tie], [headerref boost/pfr/precise/core.hpp boost::pfr::tuple_element] require T to be a flat POD type

[endsect]

[section How it works]

Short description:

* Flat functions:
    # at compile-time: use aggregate initialization to detect fields count in user-provided structure
    # at compile-time: make a structure that is convertible to anything and remeber types it has been converted to during aggregate initialization of user-provided structure
    # at compile-time: create a tuple with exactly the same layout as in user-provided structure
    # at run-time: `reinterpret_cast` a pointer to user-provided structure to the tuple pointer (this has no runtime penalty)
    # at run-time: a tuple of references to fields is returned => all the tuple methods are available for the structure

* Precise functions:
    # at compile-time: use aggregate initialization to detect fields count in user-provided structure
        * C++17:
            # at compile-time: structured bindings are used to decompose a type `T` to known amount of fields fields
        * C++14:
            # at compile-time: let `I` be is an index of current field, it equals 0
            # at run-time: `T` is constructed and field `I` is aggregate initialized using a separate instance of structure that is convertible to anything [note Additional care is taken to make sure that all the information about `T` is available to the compiler and that operations on `T` have no side effects, so the compiler can optimize away the unnecessary temporary objects.]
            # at compile-time: `I += 1`
            # at compile-time: if `I` does not equal fields count goto step [~b.] from inside of the conversion operator of the structure that is convertible to anything
            # at run-time: `reinterpret_cast` pointer to user-provided structure to the tuple pointer (this has no runtime penalty)
    # at run-time: a tuple of references to fields is returned => all the tuple methods are available for the structure

Long description: [@https://www.youtube.com/watch?v=abdeAew3gmQ Antony Polukhin: C++14 Reflections Without Macros, Markup nor External Tooling. ].

[endsect]

[section Acknowledgements]

Great thanks to Bruno Dutra for showing the technique to precisely reflect aggregate initializable type in C++14 [@https://github.com/apolukhin/magic_get/issues/5 Manual type registering/structured bindings might be unnecessary].

[endsect]

[section Reference]
[xinclude autodoc_precise.xml]
[xinclude autodoc_flat.xml]
[xinclude autodoc_all.xml]
[endsect]
