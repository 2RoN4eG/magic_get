[library Boost.POD Flat Reflection
    [quickbook 1.6]
    [version 1.0]
    [copyright 2016 Antony Polukhin]
    [category Language Features Emulation]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[section Motivation]

In C++ we have:

* tuples - types that provide access to members by index. Those are useful for generic programming.
* PODs - types with named fields that do not provide access to members by index. Those are just easy to use.

This library provides tuple like methods for POD types, making PODs usable in contexts were only tuples were useful.

[note All you have to do is to add `#include <boost/pfr.hpp>`.

No macro or other type/member registrations required.]

Boost.POD Flat Reflection (Boost.PFR) adds following out-of-the-box functionality to PODs:

* comparison operators
* heterogeneous comparators
* hash
* stream operators
* access to members by index
* member reflections
* methods for cooperation with `std::tuple`

[warning This is not an official Boost library! It wasn't reviewed and can't be downloaded from www.boost.org. This library is available to the community to know real interest and get comments for refinement. The intention is to submit library to formal review, if community think that it is interesting!]

[caution This is a C++14 library! Pre C++14 compilers (C++11, C++03...) are not supported]

[endsect]

[section Quick Start]

[import ../example/examples.cpp]

[section Accessing POD member by index] [pfr_example_get] [endsect]
[section Flattening] [pfr_example_flattening] [pfr_example_flattening_2] [endsect]
[/ [section Counting fields] [pfr_example_flat_tuple_size] [endsect] ]
[section Three ways of getting operators ]

There are three ways to start using Boost.PFR hashing, comparison and streaming operators for type `T` in your code. Each method has it's own drawbacks and suits own cases.

[table:pod_ops_comp Different approaches for operators
    [[ Approach ]                                       [ Defines operators in global namespace ]
                                                                                [ Defined operators could be found by ADL ]
                                                                                            [ Works for local types ]
                                                                                                        [ Usable localy, without affecting code from other scopes ]
                                                                                                                            [ Ignores implicit conversion operators ]  
                                                                                                                                                            [ Respects user defined operators ] ]
    [[ [headerref boost/pfr/pod_ops.hpp] ]              [ no ]                  [ no ]      [ yes ]     [ yes ]                                             [ no ]          [ yes ]                     ]
    [[ [headerref boost/pfr/define_functions_for.hpp] ] [ yes if T is in it ]   [ yes ]     [ no ]      [ no, but could be limited to translation unit ]    [ yes for T ]   [ no (compile time error) ] ]
    [[ [headerref boost/pfr/global_pod_ops.hpp] ]       [ yes ]                 [ yes ]     [ yes ]     [ no, but could be limited to translation unit ]    [ yes all ]     [ yes ]                     ]
]

More detailed description:

[*1) [headerref boost/pfr/pod_ops.hpp] approach]

This method is good if you're writing generic algorithms and need to use operators from Boost.PFR only if there's no operators defined for the type:

```
#include <boost/pfr/pod_ops.hpp>

template <class T>
struct uniform_comparator_less {
    bool operator()(const T& lhs, const T& rhs) const noexcept {
        using namespace pod_ops;    // Enables Boost.PFR operators usage in this scope.
        return lhs < rhs;           // If T has operator< or conversion operator then will use it, otherwise will use boost::pfr::flat_less<T>.
    }
};
```
This method's effects are local to the function. It works even for local types, like structures defined in functions.
However *Argument Dependant Lookup* does not work with it:

```
#include <boost/pfr/pod_ops.hpp>
template <class T>
struct uniform_comparator_less {
    bool operator()(const T& lhs, const T& rhs) const noexcept {
        using namespace pod_ops;
        return std::less{}(lhs, rhs);   // Compile time error if T has neither operator< nor conversion operator to comparable type.
    }
};
```

[*2) [headerref boost/pfr/define_functions_for.hpp] approach]

This method is good if you're writing POD structure and wish to define operators for that structure.
```
#include <boost/pfr/define_functions_for.hpp>

struct pair_like {
    int first;
    short second;
};

BOOST_PFR_DEFINE_FUNCTIONS_FOR(pair_like)   // Defines operators

// ...

assert(pair_like{1, 2} < pair_like{1, 3});
```
Argument Dependant Lookup works well, `std::less` will find the operators for `struct pair_like`. [macroref BOOST_PFR_DEFINE_FUNCTIONS_FOR BOOST_PFR_DEFINE_FUNCTIONS_FOR(T)]
can not be used for local types, it must be called only once in namespace of `T`. It does not respect conversion operators of `T`, so for example the following code
will output different values:
```
#include <boost/pfr/define_functions_for.hpp>

struct empty {
    operator std::string() { return "empty{}"; }
};
// Uncomment to get different output:
// BOOST_PFR_DEFINE_FUNCTIONS_FOR(empty)

// ...
std::cout << empty{}; // Outputs `empty{}` if BOOST_PFR_DEFINE_FUNCTIONS_FOR(empty) is commented out, '{}' otherwise.
```

[*3) [headerref boost/pfr/global_pod_ops.hpp] approach]

This approach is for those, who wish to have comparisong/streaming/hashing for all their types.

```
#include <boost/pfr/global_pod_ops.hpp>

struct pair_like {
    int first;
    short second;
};

// ...

assert(pair_like{1, 2} < pair_like{1, 3});
```
Argument Dependant Lookup works well, `std::less` will find the operators for `struct pair_like`. Operators for local types will be also defined.
*All conversion operators of all POD types won't be used during comparisons/streaming/hashing.*

[endsect]




[endsect]


[section Requirements and Limitations]

[note Boost.PFR does not depend on any Boost library. You may use it's headers even without Boost. ]

* Boost.PFR *requires C++14 compatible compiler* (GCC-5.0+, Clang, ...)
* PODs must not contain references nor bitfields
* PODs must not contain pointers to user defined types
* Fields of enum type will be returned as their underlying type
* Static variables are ignored

[caution All the methods that provide access to filds have a `reinterpret_cast` to an unrelated type. All the possible efforts and compiler scpecific tricks were used to avoid issues.

But strictly speaking *this is an Undefined Behavior.* ]

[endsect]

[xinclude autodoc.xml]
